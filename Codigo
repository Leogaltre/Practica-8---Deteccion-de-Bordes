# Uso y teoría de no Canny con Imagen de Proyecto (No detecta bien los bordes)
# Detección de Bordes – Laplaciano, Sobelx, Sobely, Canny.
# Objetivo: Dejar en la imagen solamente los bordes que deseamos y saber cuál es el mejor método.

import cv2
import numpy as np

imagen = cv2.imread('conto.png')
# img = cv2.imread('IMG1.png')
# imagen = cv2.resize(img, (600, 800))

# Imagen en escala de Grises
gray = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Metodos <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# Canny(nombre_img, umbral_bajo, umbral_alto)
canny = cv2.Canny(gray, 250, 255) #100 , 200
# Laplacian
laplacian = cv2.Laplacian(gray, cv2.CV_64F) # Detección de borde de Laplace
laplacian = np.uint8(np.absolute(laplacian))
# Sobel
sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0)#x gradiente de dirección
sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1)#y gradiente de dirección
sobelcom = cv2.bitwise_or(sobelx, sobely)
sobelCombined = np.uint8(sobelcom)
sobelX = np.uint8(sobelx)
sobelY = np.uint8(sobely)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Encontrar contornos <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# Contorno con Canny
contornos1, hierarchy1 = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
contornos2, hierarchy2 = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
# Contorno con Laplaciano
contornos10, hierarchy10 = cv2.findContours(laplacian, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
contornos20, hierarchy20 = cv2.findContours(laplacian, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
# Contorno con Sobel combinado
contornos100, hierarchy100 = cv2.findContours(sobelCombined, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
contornos200, hierarchy200 = cv2.findContours(sobelCombined, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
# Contorno con Sobel X
contornos101, hierarchy101 = cv2.findContours(sobelX, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
contornos202, hierarchy202 = cv2.findContours(sobelX, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
# Contorno con Sobel Y
contornos103, hierarchy103 = cv2.findContours(sobelY, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
contornos204, hierarchy204 = cv2.findContours(sobelY, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

cv2.imshow('Borde con Canny', canny)
cv2.waitKey(0)
cv2.drawContours(imagen, contornos2, -1, (255, 255, 0), 2)
cv2.imshow('Dibujo del Borde con Canny', imagen)
cv2.waitKey(0)

cv2.imshow('Borde con Laplaciano', laplacian)
cv2.waitKey(0)
cv2.drawContours(imagen, contornos20, -1, (0, 255, 255), 2)
cv2.imshow('Dibujo del Borde con Laplaciano', imagen)
cv2.waitKey(0)

cv2.imshow('Borde con Sobel Combinado X, Y', sobelCombined)
cv2.waitKey(0)
cv2.drawContours(imagen, contornos200, -1, (255, 0, 255), 2)
cv2.imshow('Dibujo del Borde con Sobel Combinado X, Y', imagen)
cv2.waitKey(0)

cv2.imshow('Borde con SobelX', sobelX)
cv2.waitKey(0)
cv2.drawContours(imagen, contornos202, -1, (255, 0, 0), 2)
cv2.imshow('Dibujo del Borde con SobelX', imagen)
cv2.waitKey(0)

cv2.imshow('Borde con SobelY', sobelY)
cv2.waitKey(0)
cv2.drawContours(imagen, contornos204, -1, (0, 0, 255), 2)
cv2.imshow('Dibujo del Borde con SobelY', imagen)
cv2.waitKey(0)

cv2.destroyAllWindows()


'''


 
sobelX = np.uint8(np.absolute(sobelX))#x gradiente de dirección valor absoluto
sobelY = np.uint8(np.absolute(sobelY))#y valor absoluto del gradiente de dirección
 
sobelCombined = cv2.bitwise_or(sobelX,sobelY)#
cv2.imshow("Sobel X", sobelX)
cv2.waitKey()
cv2.imshow("Sobel Y", sobelY)
cv2.waitKey()
cv2.imshow("Sobel Combined", sobelCombined)
'''

###########################################
'''
# Notas

#Para versiones OpenCV4: -> Encontrar los contornos
# cv2.findContours(1, 2, 3, 4)
# 1) Imagen Binarizada
# 2) Modo de Recuperación de contorno
      # cv2.RETR_LIST
      # cv2.RETR_EXTERNAL
      # cv2.RETR_CCOMP
      # cv2.RETR_TREE
# 3) Método de aproximación de contorno
      # cv2.CHAIN_APPROX_NONE
      # cv2.CHAIN_APPROX_SIMPLE
# 4) Desplazamiento opcional
# a,b = cv2.findContours(1, 2, 3, 4)
# a) Contornos detectados como vector de puntos
# b) Relacion de contornos

# cv2.drawContours(1, 2, 3, 4, 5)
# 1) Imagen en donde se dibujara el contorno
# 2) Contornos encontrados
# 3) Contorno que debe dibujarse (-1 = Todos los contornos)
# 4) Color
# 5) Grosor
'''
